name: "cridex with volatility with ubuntu CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month  


jobs:

  volatility-ubuntu-ubuntu-latest-job:
    name: "build volatility with ubuntu 16.04 on ubuntu latest"
    runs-on: ubuntu-latest
    env:
      version: "latest"
      name: "ubuntu/volatility"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.ubuntu.volatility"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch                  
    - name: "build volatility with ubuntu"
      run: |
        set -xe
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not usedi
        set -xe
        whoami
        echo ${USER} 
        #Add current logged in user to the docker group.
        sudo usermod -aG docker ${USER}
        id  ${USER}
        docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}  
        echo "################## ENTRYPOINT ##################"
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        echo "################## ENTRYPOINT ##################"
        docker run ${name}:${version} -h  
    - name: "analyze cridex with volatility"
      run: |
        set -xe
        docker image ls
        sudo apt-get install megatools p7zip -y
        #download image 
        #https://github.com/volatilityfoundation/volatility/wiki/Memory-Samples
        wget http://files.sempersecurus.org/dumps/cridex_memdump.zip
        unzip cridex_memdump.zip
        du -h cridex.vmem && mv cridex.vmem /tmp
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem imageinfo
        #see what were the running processes using the pslist plugin
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 pslist
        #display the processes and their parent processes
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 pstree
        #list processes that are trying to hide themselves while running on the computer
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 psxview
        #This command does not support the profile Win7SP1x64
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 connscan
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 sockets
        # This command does not support the profile WinXPSP2x86
        # docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        #--profile=WinXPSP2x86 netscan
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 consoles
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 cmdscan  
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 cmdline 
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 procdump -p 1640 --dump-dir /tmp
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 memdump -p 1640 --dump-dir /tmp
        #a relation between the piece of information
        #the opened tcp connection towards the 41.168.5.140 IP and 1640 process
        #C&C IP address: 41.168.5.140
        strings 1640.dmp | grep -Fi "41.168.5.140" -C 5
        strings 1640.dmp | grep "bank.com"
        #see if other IP addresses are used
        #pattern “/zb/v_01_a/in/” which is the path queried by the malware (“41.168.5.140:8080/zb/v_01_a/in/”)
        #another IOC: 188.40.0.138
        strings 1640.dmp | grep -Fi "/zb/v_01_a/in/"
        #print the list of registry hives
        #“HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run, RunOnce, RunOnceEx” 
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 hivelist
        #see the content of a registry key its subkeys and values
        docker run -v /tmp:/tmp ubuntu/volatility:latest -f /tmp/cridex.vmem \
        --profile=WinXPSP2x86 printkey -K "Software\Microsoft\Windows\CurrentVersion\Run"
        #confirm that the concerned executable named “KB00207877.exe” is linked with the trojan
        strings 1640.dmp | grep -Fi "KB00207877.exe"
    