name: "volatility with ubuntu CI workflow"


on:
  push:
    branches: [ test ]
  # schedule:
  #     - cron:  '0 0 1 * *' ##execution of a task in the first minute of the month  


jobs:

  volatility-ubuntu-ubuntu-latest-job:
    name: "build volatility with ubuntu 16.04 on ubuntu latest"
    runs-on: ubuntu-latest
    env:
      version: "latest"
      name: "ubuntu/volatility"
      dockerfiledir: "dockerfiles"
      dockerfilename: "Dockerfile.ubuntu.volatility"
    steps:
    - uses: actions/checkout@v2
    - name: "os fingerprinting"
      run: |
        hostnamectl status
        lsb_release -a
        lsb_release -d
        cat /etc/lsb-release
        cat /etc/issue
        cat /etc/os-release
        sudo apt-get install -y neofetch && neofetch                  
    - name: "build volatility with ubuntu"
      run: |
        set -xe
        # destroyed afterwards (use --rm )
        # all subsequent Dockerfile commands generate new images and the cache is not usedi
        set -xe
        whoami
        echo ${USER} 
        #Add current logged in user to the docker group.
        sudo usermod -aG docker ${USER}
        id  ${USER}
        docker build --no-cache --rm  -t ${name}:${version} . --file ${dockerfiledir}/${dockerfilename} 
        docker image ls
        docker image history ${name}:${version} 
        docker system df -v               
        docker image inspect ${name}:${version}  
        echo "################## ENTRYPOINT ##################"
        docker inspect -f '{{.Config.Entrypoint}}' ${name}:${version}
        echo "################## ENTRYPOINT ##################"
        docker run ${name}:${version} -h  
    - name: "analyze with volatility - What is the password?"
      run: |
        set -xe
        docker image ls
        sudo apt-get install megatools p7zip -y
        #download image 
        megadl 'https://mega.nz/#!sh8wmCIL!b4tpech4wzc3QQ6YgQ2uZnOmctRZ2duQxDqxbkWYipQ'
        p7zip -d OtterCTF.7z
        du -h OtterCTF.vmem
        mv OtterCTF.vmem /tmp
        #The imageinfo plugin will scan the image and suggest a number of likely profiles
        docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem imageinfo
        #crack with John the Ripper or Hashcat
        #dump the NTLM hashes from the SYSTEM and SAM registry hives
        docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        --profile="Win7SP1x64" hashdump
        #extracting the plaintext password from the LSA secrets, using the lsadump plugin.
        docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        --profile="Win7SP1x64" lsadump   
        echo "password is...: MortyIsReallyAnOtter"                 
    - name: "analyze with volatility - whats the PC's name and IP address?"
      run: |
        set -xe
        docker image ls
         #dump the NTLM hashes from the SYSTEM and SAM registry hives
        docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        --profile=Win7SP1x64 netscan
        echo " PC IP...: 192.168.202.131" 
        #The hostname is stored in the SYSTEM registry hive
        docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        --profile=Win7SP1x64 hivelist        
        # docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        # --profile=Win7SP1x64 hivelist | awk '/REGISTRY\\MACHINE\\SYSTEM/ {print $1} > hashes.txt
        # cat hashes.txt    
        #dump the password hashes
        # docker run -v /tmp:/tmp ${name}:${version} -f /tmp/OtterCTF.vmem \
        # --profile=Win7SP1x86 hashdump -y 0x8b21c008 -s 0x9aad6148 > hashes.txt       
        # cat hashes.txt
    